// <auto-generated />
using System;
using Capstone.data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Capstone.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Capstone.Model.Azienda", b =>
                {
                    b.Property<int>("IdAzienda")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAzienda"));

                    b.Property<string>("Cap")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Città")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Immagine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Indirizzo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Latitudine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitudine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdAzienda");

                    b.ToTable("Azienda");
                });

            modelBuilder.Entity("Capstone.Model.Giorno", b =>
                {
                    b.Property<int>("IdGiorno")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdGiorno"));

                    b.Property<DateTime>("GiornoCorrente")
                        .HasColumnType("datetime2");

                    b.HasKey("IdGiorno");

                    b.ToTable("Giorni");
                });

            modelBuilder.Entity("Capstone.Model.Recensioni", b =>
                {
                    b.Property<int>("IdRecensione")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRecensione"));

                    b.Property<int>("AziendaIdAzienda")
                        .HasColumnType("int");

                    b.Property<int>("IdAzienda_Fk")
                        .HasColumnType("int");

                    b.Property<int>("IdUser_Fk")
                        .HasColumnType("int");

                    b.Property<string>("Testo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserIdUser")
                        .HasColumnType("int");

                    b.Property<int>("Voto")
                        .HasColumnType("int");

                    b.HasKey("IdRecensione");

                    b.HasIndex("AziendaIdAzienda");

                    b.HasIndex("UserIdUser");

                    b.ToTable("Recensioni");
                });

            modelBuilder.Entity("Capstone.Model.SelezioneServizi", b =>
                {
                    b.Property<int>("IdSelezioneServizio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSelezioneServizio"));

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdServizio_Fk")
                        .HasColumnType("int");

                    b.Property<int>("IdUser_Fk")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Ora")
                        .HasColumnType("time");

                    b.Property<int>("ServiziIdServizio")
                        .HasColumnType("int");

                    b.Property<string>("TipoServizio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserIdUser")
                        .HasColumnType("int");

                    b.HasKey("IdSelezioneServizio");

                    b.HasIndex("ServiziIdServizio");

                    b.HasIndex("UserIdUser");

                    b.ToTable("SelezioneServizi");
                });

            modelBuilder.Entity("Capstone.Model.Servizi", b =>
                {
                    b.Property<int>("IdServizio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdServizio"));

                    b.Property<int>("AziendaIdAzienda")
                        .HasColumnType("int");

                    b.Property<string>("Categoria")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdAzienda_Fk")
                        .HasColumnType("int");

                    b.Property<string>("Immagine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Prezzo")
                        .HasColumnType("float");

                    b.HasKey("IdServizio");

                    b.HasIndex("AziendaIdAzienda");

                    b.ToTable("Servizi");
                });

            modelBuilder.Entity("Capstone.Model.Slot", b =>
                {
                    b.Property<int>("IdSlot")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSlot"));

                    b.Property<int>("GiornoCorrenteIdGiorno")
                        .HasColumnType("int");

                    b.Property<int>("Giorno_FK")
                        .HasColumnType("int");

                    b.Property<int>("IdServizio_Fk")
                        .HasColumnType("int");

                    b.Property<int>("ServiziIdServizio")
                        .HasColumnType("int");

                    b.Property<string>("fasciaOraria")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("numPrenotazioni")
                        .HasColumnType("int");

                    b.HasKey("IdSlot");

                    b.HasIndex("GiornoCorrenteIdGiorno");

                    b.HasIndex("ServiziIdServizio");

                    b.ToTable("Slot");
                });

            modelBuilder.Entity("Capstone.Model.User", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUser"));

                    b.Property<string>("Cap")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cellulare")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Città")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cognome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Immagine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Indirizzo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Latitudine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitudine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ruolo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isOnline")
                        .HasColumnType("bit");

                    b.HasKey("IdUser");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Capstone.Model.Recensioni", b =>
                {
                    b.HasOne("Capstone.Model.Azienda", "Azienda")
                        .WithMany("Recensioni")
                        .HasForeignKey("AziendaIdAzienda")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Capstone.Model.User", "User")
                        .WithMany("Recensioni")
                        .HasForeignKey("UserIdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Azienda");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Capstone.Model.SelezioneServizi", b =>
                {
                    b.HasOne("Capstone.Model.Servizi", "Servizi")
                        .WithMany("SelezioneServizi")
                        .HasForeignKey("ServiziIdServizio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Capstone.Model.User", "User")
                        .WithMany("SelezioneServizi")
                        .HasForeignKey("UserIdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Servizi");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Capstone.Model.Servizi", b =>
                {
                    b.HasOne("Capstone.Model.Azienda", "Azienda")
                        .WithMany("Servizi")
                        .HasForeignKey("AziendaIdAzienda")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Azienda");
                });

            modelBuilder.Entity("Capstone.Model.Slot", b =>
                {
                    b.HasOne("Capstone.Model.Giorno", "GiornoCorrente")
                        .WithMany("Slots")
                        .HasForeignKey("GiornoCorrenteIdGiorno")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Capstone.Model.Servizi", "Servizi")
                        .WithMany("Slot")
                        .HasForeignKey("ServiziIdServizio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GiornoCorrente");

                    b.Navigation("Servizi");
                });

            modelBuilder.Entity("Capstone.Model.Azienda", b =>
                {
                    b.Navigation("Recensioni");

                    b.Navigation("Servizi");
                });

            modelBuilder.Entity("Capstone.Model.Giorno", b =>
                {
                    b.Navigation("Slots");
                });

            modelBuilder.Entity("Capstone.Model.Servizi", b =>
                {
                    b.Navigation("SelezioneServizi");

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("Capstone.Model.User", b =>
                {
                    b.Navigation("Recensioni");

                    b.Navigation("SelezioneServizi");
                });
#pragma warning restore 612, 618
        }
    }
}
